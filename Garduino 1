#include <Time.h>
#include <TimeAlarms.h>

//declare pins for sensors, actuators
const int T[2]={A0,A1};
const int lights=2;
const int heater=3;
const int fan=4;
float t1Raw=0.0;
float t2Raw=0.0;
int States[3]={LOW,LOW,LOW};//lights, heater, fan
int lStates[3];
// setup the pins
void setup(){
  Serial.begin(9600);
  pinMode(T[0], INPUT);
  pinMode(T[1], INPUT);
  pinMode(lights, OUTPUT);
  digitalWrite(lights, HIGH);
  pinMode(heater, OUTPUT);
  digitalWrite(heater,LOW);
  pinMode(fan, OUTPUT);
  digitalWrite(fan, LOW);
  setTime(13,17,0,2,20,14); // set time to Saturday 8:29:00am Jan 1 2011
  // create the alarms 
  Alarm.alarmRepeat(2,00,0, lightsOn);  // 8:30am every day
  Alarm.alarmRepeat(23,59,0, lightsOff);  // 5:45pm every day 
  //Alarm.alarmRepeat(dowSaturday,8,30,30,WeeklyAlarm);  // 8:30:30 every Saturday 

 
  Alarm.timerRepeat(5, checkGarden);            // timer for every 15 seconds    
  //Alarm.timerOnce(10, OnceOnly);             // called once after 10 seconds 
}

void loop(){
  checkGarden();
  compareStates();
  delay(5000);
}

//read temperature
int rawTemp(int pin){
  int result;
  result= analogRead(pin);
  return result;
}
//this is a function to scale the analog input per the ADC
float ADConv(int raw){
  float conv;
  conv= raw *(5/1024.0);
  return conv;
}
//this is the bit of code that converts the mV to degrees C
int convert(float raw){
  float temp = raw -.5;
  temp = temp/.01;
  return temp;
}
// this function returns the average temp.
float avgTemp(){
  int raw1;
  int raw2;
  int sum;
  raw1= rawTemp(T[0]);
  raw2= rawTemp(T[1]);
  sum = raw1+raw2;
  int average= sum/2;
  int temp;
  temp= convert(ADConv(average));
  return temp;
  
}
// this returns the status of the lights as high or low
int lightStatus(){
  int lStatus;
  lStatus=digitalRead(lights);
  if (lStatus == HIGH){
    return HIGH;
  }
  else{
    return LOW;
  }
}
// this returnsthe status of the heater, as HIGH or LOW
int heaterStatus(){
  int hStatus;
  hStatus=digitalRead(heater);
  if (hStatus == HIGH){
    return HIGH;
  }
  else{
    return LOW;
  }
}
//this returns the status of the fan, as HIGH or LOW
int fanStatus(){
  int fStatus;
  fStatus=digitalRead(heater);
  if (fStatus == HIGH){
    return HIGH;
  }
  else{
    return LOW;
  }
}
//turns the exhaust on
void exhaustOn(){
  digitalWrite(fan, HIGH);
}
//turns the exhaust off
void exhaustOff(){
  digitalWrite(fan,LOW);
}
//turns the heater on
void heaterOn(){
  digitalWrite(heater, HIGH);
}
//turns the heater off
void heaterOff(){
  digitalWrite(heater,LOW);
}
//turns the lights on
void lightsOn(){
  digitalWrite(lights, HIGH);
}
//turns the lights off.
void lightsOff(){
  digitalWrite(lights,LOW);
}


void checkGarden(){
  int currentTemp= avgTemp();
  int timeNow=millis()/1000;
  Serial.print("time=");
  Serial.print(timeNow);
  Serial.print(", ");
  Serial.print("currentTemp=");
  Serial.print(currentTemp);
  Serial.print(", ");
  //int lightZ = lightStatus();
  //int heaterZ = heaterStatus();
  //int fanZ = fanStatus();
  States[0]= lightStatus();
  //States[1]= heaterZ;
  //States[2]= fanZ;
  lStates[0]=lightStatus();
  lStates[1]=heaterStatus();
  Serial.print("Lstate1");
  Serial.print(lStates[1]);
  lStates[2]=fanStatus();
  if(currentTemp >=25){
    if(lights == HIGH){
      exhaustOn();
      delay (15000);
      exhaustOff();
      return;
    } 
  }
  if(currentTemp <= 23){
    States[1] = HIGH;
  }
  if(currentTemp >23){
      States[1]=LOW;
  }
  
  compareStates();
  Serial.print("States=");
  Serial.print(States[0]);
  //Serial.print(", ");
  Serial.print(States[1]);
  //Serial.print(", ");
  Serial.println(States[2]);
  
}

void compareStates(){
  if(lStates[1]==States[1]){
    if(States[1]==HIGH){
      digitalWrite(heater,HIGH);
    }
    if(States[1]==LOW){
      digitalWrite(heater,LOW);
    }
  }
  
}

